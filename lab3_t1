class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class LinkedList:
    def __init__(self,values=None):
        self.head=None
        

        if values is not None:
            if isinstance(values, (list, tuple, set)):
                for value in values:
                    self.insert_at_end(value)
            else:
                self.insert_at_end(values)

    def insert_at_start(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
        else:
            new_node.next=self.head
            self.head=new_node

    def insert_at_end(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
        else:
            current=self.head
            while current.next is not None:
                current=current.next
            current.next=new_node  
     
    def insert_after(self,key,data):
        new_node=Node(data)

        current=self.head
        while current is not None:
            if current.data==key:
                new_node.next=current.next
                current.next=new_node
                break
            current=current.next

    def insert_before(self,key,data):
        new_node=Node(data)
        

        current=self.head
        while current.next is not None:
            if current.next.data==key:
                new_node.next=current.next
                current.next=new_node
                break
            current=current.next

    def search(self,key):
        if self.head is None:
            print('List is empty')

        else:
            current=self.head
            while current is not None:
                if current.data==key:
                    return True
                current=current.next

            return False

    def print_llist(self):
        if self.head is None:
            print('Linked List is empty')

        else:
            current=self.head
            while current is not None:
                print(current.data,end=' ')
                current=current.next
            print()

    def remove_at_start(self):
        if self.head is None:
            return 'List is empty'
        current=self.head
        self.head=current.next
        del current

    def remove_at_end(self):
        if self.head is None:
            return
        current=self.head
        current1=self.head
        while current.next is not None:
            current1=current
            current=current.next
        current1.next=None

        del current

    def remove_before(self,key):
        if self.head is None:
            return
        current =self.head
        current1=self.head
        while current is not None:
            if current.next.data==key:
                del current
                break
            current1=current
            current=current.next

    def remove_after(self, key):
        if self.head is None:
            print('List is empty')
            return
        temp = self.head
        temp2 = self.head
        while temp.next is not None:
            if temp.data == key:
                temp.next = temp2.next
                del temp2
                return
            temp = temp.next
            temp2 = temp.next

    def update(self, key ,val):
        temp = self.head
        while temp is not None:
            if temp.data == key:
                temp.data = val
                return
            temp = temp.next
                
    def count(self):
        current=self.head
        count=0
        while current is not None:
            count+=1
            current=current.next
        return count
             
    def removeKthnode(self,k):
        count=1
        current=self.head

        if self.count()<k:
            print('count is greater than total indices')
            return False
        
        else:
            if k==1:
                self.remove_at_start()
            elif self.count()==k:
                self.remove_at_end()

            while current.next.next is not None:
                if count==k-1:
                    new=current.next.next
                    current.next.next=None
                    current.next=new
                    break       
                
                current=current.next 
                count+=1   

    def combine(self,list1,list2):
        self.head=list1.head

        current=list1.head
        while current.next is not None:
            current=current.next
        current.next=list2.head
 
    def shuffle_merge(self,list1,list2):
       self.head=list1.head
       
       current1=list1.head
       current2=list2.head

       while current1 is not None:
           next1=current1.next
           next2=current2.next

           current1=current2
           current2.next=next1

           current1=next2
           current2=next2

       list1.head=None
       list2.head=None

    def remove_duplicates(self):
        if not self.head:
            return self.head
    
        new = []
        new.append(self.head.data)
        prev = self.head
        current = self.head.next
    
        while current:
            if current.data in new:
                prev.next = current.next
            else:
                new.append(current.data)
                prev = current
            current = current.next
        return self.head
    
    def reverse_llist(self):
        current=self.head
        prev=None

        while current is not None:
            next=current.next
            current.next=prev
            prev=current
            current=next
        self.head=prev
        
        
           



        
def main():
    l1=LinkedList([1,2,3,4,5])
    l2=LinkedList([6,7,8,9,9,10])
    l3=LinkedList()
    
   
    l1.print_llist()
    # l2.print_llist()
    l1.reverse_llist()
    l1.print_llist()

    # l1.remove_at_end()
    # l1.remove_at_start()
    # l2.remove_after(7)
    # l2.remove_duplicates()
    # l1.removeKthnode(6)
    # l1.print_llist()
    # l2.print_llist()
    # l3.combine(l1,l2)
    # l3.print_llist()




    


main()